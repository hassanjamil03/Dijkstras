

class Node:
    def __init__(self, Distances):
        self.Distances = Distances
        self.IsActive = True
        self.DistanceTo = 0

nodes = []
Unodes = []

def Dijkstras(CNode):
    CNode = nodes[CNode]
    if len(CNode.distances) == 0 and len(nodes) > 0: Dijkstras(Unodes[-1])
    NNodeDis = min([point[0] for point in CNode.Distances])
    NNode = nodes[NNodeDis]



"""
example: 

nodes = [a, b, c, r, f, w, g, h]; all items in this list are node objects
nodes[x].distances = [(1, 7), (3, 5), (2, 3)]; 1, 2, and 3 represent distance from node at index x;  7, 5, and 3 represent nodes with that number
nodes[x].dist = distance of node x from the first node

 
def dijkstras(current node number):
    get current node object (cnode = node[current node number)
    get nearest node (nnode = node[min(cnode.distances)])
        if cnode.distances is empty and nodes list isnt empty: dijkstras(usednodes[-1])
    distance to nearest node is equal to = distance to last node ('a') + distance to nearest node (nnode.distanceto = cnode.distanceto + cnode.
    cnode.distances.pop(whichever element contains nnode) 
    transfer node to usednodes list (usednodes.append(cnode))
    dijkstras(nearest node number)
    
def dijstras(node number):
get current node object
    
    for point in cnode.distances:
        update distance to node 
        see which (distance,node) point is nearest
        set this node object to nearest node
    cnode.distances.pop(nearest node)
    move current node to used nodes list
    if unused nodes list > 0 and len(cnode.distances) == 0:
        dijkstras(usednodes[-2])
    else: dijkstras(number of nearest node)
    






"""
